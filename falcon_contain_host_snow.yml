---
- name: Playbook to Contain a host and open a SNOW ticket after a detection event
  hosts: localhost
  gather_facts: false
  become: true

  vars:
    sn_username: "{{ lookup('ansible.builtin.env', 'SN_USERNAME') }}"
    sn_instance: "{{ lookup('ansible.builtin.env', 'SN_HOST') }}"


  tasks:

    - name: Lets do a one time Authentication to the Falcon server for the Play
      crowdstrike.falcon.auth:
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        cloud: "{{ cloud }}"
        action: generate
      register: falcon_oauth

    - name: Display the auth results
      ansible.builtin.debug:
        var: falcon_oauth

    - name: Lets open a ServiceNow Incident Ticket
      servicenow.itsm.incident:
        state: new
        description: |
          "Test."
        short_description: "Crowdstrike Falcon Detected an anomaly on a host"
        caller: "{{ sn_username }}"
        urgency: "low"
        impact: "low"
      register: new_incident 

    - set_fact:
        incident_number_cached: "{{ new_incident.record.number }}"
        cacheable: true

    - ansible.builtin.debug:
        msg: "A new incident has been created: {{ new_incident.record.number }}"

    - name: Lets Contain the host in Crowdstrike Falcon until we figure out what up 
      crowdstrike.falcon.host_contain:
        hosts:
          - "c1dc9d692b6c453da281bdb4cc47859d"
      register: containment_status

    - name: Dump out the result from the containment
      ansible.builtin.debug:
        var: containment_status

